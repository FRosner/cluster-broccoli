{
  "name": "connect",
  "description": "High performance middleware framework",
  "version": "3.5.0",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com"
    },
    {
      "name": "Tim Caswell",
      "email": "tim@creationix.com"
    }
  ],
  "keywords": [
    "framework",
    "web",
    "middleware",
    "connect",
    "rack"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/senchalabs/connect.git"
  },
  "dependencies": {
    "debug": "~2.2.0",
    "finalhandler": "0.5.0",
    "parseurl": "~1.3.1",
    "utils-merge": "1.0.0"
  },
  "devDependencies": {
    "istanbul": "0.4.5",
    "mocha": "3.0.2",
    "supertest": "2.0.0"
  },
  "license": "MIT",
  "files": [
    "LICENSE",
    "History.md",
    "Readme.md",
    "index.js"
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "mocha --require test/support/env --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/"
  },
  "readme": "# Connect\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\n  Connect is an extensible HTTP server framework for [node](http://nodejs.org) using \"plugins\" known as _middleware_.\n\n```js\nvar connect = require('connect');\nvar http = require('http');\n\nvar app = connect();\n\n// gzip/deflate outgoing responses\nvar compression = require('compression');\napp.use(compression());\n\n// store session state in browser cookie\nvar cookieSession = require('cookie-session');\napp.use(cookieSession({\n    keys: ['secret1', 'secret2']\n}));\n\n// parse urlencoded request bodies into req.body\nvar bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded());\n\n// respond to all requests\napp.use(function(req, res){\n  res.end('Hello from Connect!\\n');\n});\n\n//create node.js http server and listen on port\nhttp.createServer(app).listen(3000);\n```\n\n## Getting Started\n\nConnect is a simple framework to glue together various \"middleware\" to handle requests.\n\n### Install Connect\n\n```sh\n$ npm install connect\n```\n\n### Create an app\n\nThe main component is a Connect \"app\". This will store all the middleware\nadded and is, itself, a function.\n\n```js\nvar app = connect();\n```\n\n### Use middleware\n\nThe core of Connect is \"using\" middleware. Middleware are added as a \"stack\"\nwhere incoming requests will execute each middleware one-by-one until a middleware\ndoes not call `next()` within it.\n\n```js\napp.use(function middleware1(req, res, next) {\n  // middleware 1\n  next();\n});\napp.use(function middleware2(req, res, next) {\n  // middleware 2\n  next();\n});\n```\n\n### Mount middleware\n\nThe `.use()` method also takes an optional path string that is matched against\nthe beginning of the incoming request URL. This allows for basic routing.\n\n```js\napp.use('/foo', function fooMiddleware(req, res, next) {\n  // req.url starts with \"/foo\"\n  next();\n});\napp.use('/bar', function barMiddleware(req, res, next) {\n  // req.url starts with \"/bar\"\n  next();\n});\n```\n\n### Error middleware\n\nThere are special cases of \"error-handling\" middleware. There are middleware\nwhere the function takes exactly 4 arguments. When a middleware passes an error\nto `next`, the app will proceed to look for the error middleware that was declared\nafter that middleware and invoke it, skipping any error middleware above that\nmiddleware and any non-error middleware below.\n\n```js\n// regular middleware\napp.use(function (req, res, next) {\n  // i had an error\n  next(new Error('boom!'));\n});\n\n// error middleware for errors that occurred in middleware\n// declared before this\napp.use(function onerror(err, req, res, next) {\n  // an error occurred!\n});\n```\n\n### Create a server from the app\n\nThe last step is to actually use the Connect app in a server. The `.listen()` method\nis a convenience to start a HTTP server.\n\n```js\nvar server = app.listen(port);\n```\n\nThe app itself is really just a function with three arguments, so it can also be handed\nto `.createServer()` in Node.js.\n\n```js\nvar server = http.createServer(app);\n```\n\n## Middleware\n\nThese middleware and libraries are officially supported by the Connect/Express team:\n\n  - [body-parser](https://www.npmjs.com/package/body-parser) - previous `bodyParser`, `json`, and `urlencoded`. You may also be interested in:\n    - [body](https://www.npmjs.com/package/body)\n    - [co-body](https://www.npmjs.com/package/co-body)\n    - [raw-body](https://www.npmjs.com/package/raw-body)\n  - [compression](https://www.npmjs.com/package/compression) - previously `compress`\n  - [connect-timeout](https://www.npmjs.com/package/connect-timeout) - previously `timeout`\n  - [cookie-parser](https://www.npmjs.com/package/cookie-parser) - previously `cookieParser`\n  - [cookie-session](https://www.npmjs.com/package/cookie-session) - previously `cookieSession`\n  - [csurf](https://www.npmjs.com/package/csurf) - previously `csrf`\n  - [errorhandler](https://www.npmjs.com/package/errorhandler) - previously `error-handler`\n  - [express-session](https://www.npmjs.com/package/express-session) - previously `session`\n  - [method-override](https://www.npmjs.com/package/method-override) - previously `method-override`\n  - [morgan](https://www.npmjs.com/package/morgan) - previously `logger`\n  - [response-time](https://www.npmjs.com/package/response-time) - previously `response-time`\n  - [serve-favicon](https://www.npmjs.com/package/serve-favicon) - previously `favicon`\n  - [serve-index](https://www.npmjs.com/package/serve-index) - previously `directory`\n  - [serve-static](https://www.npmjs.com/package/serve-static) - previously `static`\n  - [vhost](https://www.npmjs.com/package/vhost) - previously `vhost`\n\nMost of these are exact ports of their Connect 2.x equivalents. The primary exception is `cookie-session`.\n\nSome middleware previously included with Connect are no longer supported by the Connect/Express team, are replaced by an alternative module, or should be superseded by a better module. Use one of these alternatives instead:\n\n  - `cookieParser`\n    - [cookies](https://www.npmjs.com/package/cookies) and [keygrip](https://www.npmjs.com/package/keygrip)\n  - `limit`\n    - [raw-body](https://www.npmjs.com/package/raw-body)\n  - `multipart`\n    - [connect-multiparty](https://www.npmjs.com/package/connect-multiparty)\n    - [connect-busboy](https://www.npmjs.com/package/connect-busboy)\n  - `query`\n    - [qs](https://www.npmjs.com/package/qs)\n  - `staticCache`\n    - [st](https://www.npmjs.com/package/st)\n    - [connect-static](https://www.npmjs.com/package/connect-static)\n\nCheckout [http-framework](https://github.com/Raynos/http-framework/wiki/Modules) for many other compatible middleware! \n\n## Running Tests\n\n```bash\nnpm install\nnpm test\n```\n\n## Contributors\n\n https://github.com/senchalabs/connect/graphs/contributors\n\n## Node Compatibility\n\n  - Connect `< 1.x` - node `0.2`\n  - Connect `1.x` - node `0.4`\n  - Connect `< 2.8` - node `0.6`\n  - Connect `>= 2.8 < 3` - node `0.8`\n  - Connect `>= 3` - node `0.10`, `0.12`; io.js `1.x`, `2.x`\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/connect.svg\n[npm-url]: https://npmjs.org/package/connect\n[travis-image]: https://img.shields.io/travis/senchalabs/connect/master.svg\n[travis-url]: https://travis-ci.org/senchalabs/connect\n[coveralls-image]: https://img.shields.io/coveralls/senchalabs/connect/master.svg\n[coveralls-url]: https://coveralls.io/r/senchalabs/connect\n[downloads-image]: https://img.shields.io/npm/dm/connect.svg\n[downloads-url]: https://npmjs.org/package/connect\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/senchalabs/connect/issues"
  },
  "homepage": "https://github.com/senchalabs/connect#readme",
  "_id": "connect@3.5.0",
  "_from": "connect@^3.3.5"
}
