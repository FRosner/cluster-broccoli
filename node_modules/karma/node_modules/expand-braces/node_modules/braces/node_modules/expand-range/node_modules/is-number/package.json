{
  "name": "is-number",
  "description": "Is the value a number? Has extensive tests.",
  "version": "0.1.1",
  "homepage": "https://github.com/jonschlinkert/is-number",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/is-number.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/is-number/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonschlinkert/is-number/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "devDependencies": {
    "verb-tag-jscomments": ">= 0.2.0",
    "verb": ">= 0.2.6",
    "mocha": "*"
  },
  "keywords": [
    "coerce",
    "coercion",
    "integer",
    "is",
    "istype",
    "javascript",
    "math",
    "number",
    "test",
    "type",
    "typeof",
    "util",
    "utility",
    "value"
  ],
  "readme": "# is-number [![NPM version](https://badge.fury.io/js/is-number.svg)](http://badge.fury.io/js/is-number)\n\n\n> Is the value a number? Has extensive tests.\n\n## Install\n#### Install with [npm](npmjs.org):\n\n```bash\nnpm i is-number --save-dev\n```\n\n## Run tests\n\n```bash\nnpm test\n```\n\n## Usage\n\n```js\nvar isNumber = require('is-number');\n```\n\n\n### true\n\n```js\nisNumber(5e3);\n\nisNumber(0xff);\n\nisNumber(-1.1);\nisNumber(0);\nisNumber(1);\nisNumber(1.1);\nisNumber(10);\nisNumber(10.10);\nisNumber(100);\n\nisNumber('-1.1');\nisNumber('0');\nisNumber('012');\nisNumber('0xff');\nisNumber('1');\nisNumber('1.1');\nisNumber('10');\nisNumber('10.10');\nisNumber('100');\nisNumber('5e3');\n\nisNumber(parseInt('012'));\nisNumber(parseFloat('012'));\n\nisNumber(Infinity);\nisNumber('Infinity');\n```\n\nIf you want `Infinity` to be `false`, just do:\n\n```js\nvar isNumber = require('is-number');\n\nfunction isNum(val) {\n  return isNumber(val) && isFinite(val);\n}\n```\n\n### false\n\n```js\nisNumber('3abc');\nisNumber('abc');\nisNumber('abc3');\nisNumber('null');\nisNumber('undefined');\nisNumber([1, 2, 3]);\nisNumber(function () {});\nisNumber(new Buffer('abc'));\nisNumber(null);\nisNumber(undefined);\nisNumber({abc: 'abc'});\nisNumber({});\nisNumber([]);\n```\n\n## Notes\n\nInstead of using `isFinite()`, you can also achieve similar results by using something like `((+n+1) / (+n+1) === 1))`, but this alone allows values like `null` to pass as numbers (in JavaScript, the leading `+` coerces the value to a number, [see this gist](https://gist.github.com/jonschlinkert/e30c70c713da325d0e81) for some oddities).\n\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014 Jon Schlinkert, contributors.  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on September 21, 2014._",
  "readmeFilename": "README.md",
  "_id": "is-number@0.1.1",
  "_from": "is-number@^0.1.1"
}
